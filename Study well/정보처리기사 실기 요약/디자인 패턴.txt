생성 - 객체 생성 방식

싱글톤 - 클래스에 인스턴스 하나. 전역 접근 제공
팩토리 메서드 - 부모 클래스에서 객체 생성 인터페이스 제공. 자식 클래스들이 객체의 유형 변경 가능 
추상 팩토리 - 여러 종류의 객체를 일관된 방식으로 생성
빌더 - 복잡한 객체를 단계별로 생성. 객체의 다양한 유형들과 표현을 생성할 수 있다
(Stringbuilder, Servicebuilder)
프로토타입 - 원본 객체를 복제해서 객체 생성



구조 - 

어댑터 - 호환되지 않는 인터페이스를 가진 객체들 협업
브리지 - 추상층을 분리하여 서로가 독립적으로 확장 가능
컴포지트 - 객체들을 트리 구조로 구성. 이 트리 구조들이 개별 객체들인 것처럼 작업하게 해줌
데코레이터 - 행동들을 해당 객체에 연결
퍼사드 - 복잡한 집합에 대한 단순한 인터페이스 제공(@SLF4J)
플라이웨이트 - 객체 간의 공통 부분들을 공유하여 메모리 사용량을 최소화
(이름 뜻으로 보면 가벼운 무게, 경량화라고 생각하면 될듯)

프록시 - 대리자를 두어 객체에 접근을 제어. 객체에 전달되기 전 또는 후에 무언가 수행 가능(AOP)


행위 - 행동 or 알고리즘

책임 연쇄 - 핸들러의 사슬을 따라 요청을 전달. 요청을 전달할지 처리할지 결정 가능
커맨드 - 사용자가 보낸 요청을 나중에 이용할 수 있도록 정보를 저장, 로깅, 취소할 수 있다
반복자 - 자료 구조(컨테이너)에서 요소들을 가져오기 위한 정보를 제공한다

중재자 - 객체 간 통신, 상호작용을 중재자 객체를 통해서만 협력한다
메멘토 - 요청에 따라 객체를 특정 시점의 상태로 되돌릴 수 있는 기능을 제공한다
옵저버 - 관찰 대상의 변화를 관찰자들에게 통지하고 알림을 받는다

상태 - 객체 상태에 따라 동일한 동작을 다르게 처리
전략 - 알고리즘들을 캡슐화하여 상호교체가 가능하게 한다
템플릿 메서드 - 부모 클래스에서 알고리즘의 골격 정의, 자식 클래스들이 세부적으로 정의
비지터- 방문자에게 행동을 위임하여 클래스를 수정하지 않고도 새로운 기능을 추가할 수 있다

인터프리터 = 언어에 문법 표현 정의
